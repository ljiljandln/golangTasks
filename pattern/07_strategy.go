package pattern

/*
Пасстер Стратегия
поведенческий паттерн проектирования уровня объекта

определяет набор алгоритмов схожего действия, инкапсулирует их в отдельный
класс и делает их подменяемыми.
позволяет подменять алгоритмы без участия клиентов, которые используют эти алгоритмы.

применяется когда:
- внутри одного объекта могут применяться разные вариации алгоритма
- похожие структуры отличаются только поведением
- нужно скрыть детали реализации алгоритмов

плюсы:
- замена алгоритмов налету
- изолирует алгоритмы от остального кода
- замена наследования делегированием
- реализует принцип открытости закрытости

минусы:
- код усложняется за счет множества новых структур
- для выбора подходящей стратегии клиент должен в них разбираться
*/

// StrategySort интерфейс для алгоритмов сортировки
type StrategySort interface {
	Sort([]int)
}

// InsertionSort реализует алгоритм сортировки вставками
type InsertionSort struct{}

// Sort сортировка
func (s *InsertionSort) Sort(data []int) {
	// алгоритм сортировки вставками
}

// MergeSort реализует алгоритм сортировки слиянием
type MergeSort struct{}

func (s *MergeSort) Sort(data []int) {
	// алгоритм сортировки слиянием
}

// Context предоставляет контекст для исполнения стратегии
type Context struct {
	strategy StrategySort
}

// Algorithm заменяет стратегию
func (c *Context) Algorithm(a StrategySort) {
	c.strategy = a
}

func (c *Context) Sort(s []int) {
	c.strategy.Sort(s)
}
